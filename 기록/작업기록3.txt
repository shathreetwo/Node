3. MongoDB 연결, 게시글(Post) 모델 생성 및 CRUD API 구현


Atlas 가입 및 클러스터 생성

Mongodb pw : z3yCsAe1HhkLDXTK

데이터베이스 사용자 설정
Database Access -> Add New Database User
Username / Password 지정 (boarduser / boardpass123)
권한은 Read and Write to any database 

IP 주소 허용 설정
ALLOW ACCESS FROM ANYWHERE(0.0.0.0/0)

연결 URI 복사
클러스터 대시보드에서 Connect 
프로젝트 최상위에 .env 파일 생성

server.js에서 mongoose로 연결

// server.js
require('dotenv').config(); // 가장 먼저 불러오기!
const express = require('express');
const mongoose = require('mongoose');
const postsRouter = require('./routes/posts');

const app = express();
const PORT = process.env.PORT || 3000;

// MongoDB 연결
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('✅ MongoDB 연결 성공!'))
.catch((err) => console.error('❌ MongoDB 연결 실패:', err));

// 미들웨어
app.use(express.json());

// 라우터 등록
app.use('/posts', postsRouter);

// 기본 라우터
app.get('/', (req, res) => {
  res.send('📌 게시판 서버 메인 페이지입니다!');
});

// 서버 시작
app.listen(PORT, () => {
  console.log(`✅ 서버 실행 중: http://localhost:${PORT}`);
});

게시글(Post) 모델 생성 및 CRUD API 구현
models/Post.js 생성

// models/Post.js
const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
  author: { type: String, default: '익명' },
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Post', postSchema);

routes/posts.js 수정 (CRUD 기능 추가)

// routes/posts.js
const express = require('express');
const router = express.Router();
const Post = require('../models/Post');

// 📌 게시글 작성
router.post('/', async (req, res) => {
  try {
    const newPost = await Post.create(req.body);
    res.status(201).json(newPost);
  } catch (err) {
    res.status(400).json({ error: '게시글 생성 실패', details: err.message });
  }
});

// 📌 게시글 목록 조회
router.get('/', async (req, res) => {
  const posts = await Post.find().sort({ createdAt: -1 });
  res.json(posts);
});

// 📌 게시글 단건 조회
router.get('/:id', async (req, res) => {
  const post = await Post.findById(req.params.id);
  if (post) res.json(post);
  else res.status(404).json({ error: '게시글을 찾을 수 없습니다.' });
});

// 📌 게시글 수정
router.put('/:id', async (req, res) => {
  try {
    const updated = await Post.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updated);
  } catch (err) {
    res.status(400).json({ error: '수정 실패', details: err.message });
  }
});

// 📌 게시글 삭제
router.delete('/:id', async (req, res) => {
  await Post.findByIdAndDelete(req.params.id);
  res.json({ message: '삭제 완료' });
});

module.exports = router;

이제 서버를 실행하고, Postman 또는 브라우저에서 다음과 같이 API를 테스트할 수 있어요:

GET /posts → 게시글 목록

POST /posts → 새 게시글 생성

GET /posts/:id → 게시글 상세

PUT /posts/:id → 게시글 수정

DELETE /posts/:id → 게시글 삭제

Postman으로 테스트
왼쪽에서 POST 선택 URL 입력 http://localhost:3000/posts
Headers 탭 클릭 후 아래 항목 입력:
KEY	VALUE
Content-Type	application/json
Body 탭 → raw 선택 → JSON 형식으로 아래 입력:
{
  "title": "Postman으로 작성한 글",
  "content": "이건 Postman을 통해 작성한 첫 게시글입니다.",
  "author": "yuuki"
}
전송 및 결과 확인

-----오류-----
해결. 
routes/posts.js
맨 아래에 다음을 꼭 추가:
module.exports = router;

한 줄이 없으면 server.js에서 require('./routes/posts')를 했을 때 undefined가 넘어오게 되고,
그 결과로 "argument handler must be a function" 오류가 발생